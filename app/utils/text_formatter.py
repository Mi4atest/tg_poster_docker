import re
from typing import Optional
from app.utils.signatures import get_telegram_signature, get_vk_signature, get_instagram_signature

def format_post_text(text: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –±–æ–ª–µ–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    
    –ü—Ä–∞–≤–∏–ª–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
    - –í—ã–¥–µ–ª—è–µ—Ç –∂–∏—Ä–Ω—ã–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏)
    - –í—ã–¥–µ–ª—è–µ—Ç –∂–∏—Ä–Ω—ã–º —Ü–µ–Ω—É
    - –í—ã–¥–µ–ª—è–µ—Ç –∫—É—Ä—Å–∏–≤–æ–º –±–ª–æ–∫–∏ –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî"
    - –í—ã–¥–µ–ª—è–µ—Ç –∂–∏—Ä–Ω—ã–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–ö–æ–º–ø–ª–µ–∫—Ç, –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä, IMEI –∏ —Ç.–¥.)
    - –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if not text:
        return ""
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    lines = text.strip().split('\n')
    formatted_lines = []
    
    # –§–ª–∞–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –±–ª–æ–∫–µ –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
    in_special_block = False
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
    for i, line in enumerate(lines):
        line = line.strip()
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if not line:
            formatted_lines.append("")
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
        if re.match(r'^-{5,}$', line.replace('‚Äî', '-')):
            in_special_block = not in_special_block
            formatted_lines.append("‚Äî" * 30)
            continue
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –Ω–µ–ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É (–Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏) –∂–∏—Ä–Ω—ã–º
        if i == 0 or (i > 0 and not any(lines[:i])):
            # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            model_name = re.sub(r'(üî•|üëç|‚≠êÔ∏è|üì±|üì≤|üíØ|üéÅ|üéÑ|üéÄ)+', '', line)
            model_name = model_name.strip()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –æ–±—Ä–∞—Ç–Ω–æ, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
            if 'üî•' in line:
                formatted_lines.append(f"üî• *{model_name}* üî•")
            else:
                formatted_lines.append(f"*{model_name}*")
            continue
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ü–µ–Ω–æ–π
        if 'üíµ' in line or '–¶–µ–Ω–∞:' in line.lower() or '—Ü–µ–Ω–∞' in line.lower():
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
            price_match = re.search(r'(\d+[\s\.,]?\d*)\s*(?:—Ä—É–±|—Ä|‚ÇΩ|RUB)', line, re.IGNORECASE)
            if price_match:
                price = price_match.group(1).replace(' ', '')
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –º–µ–∂–¥—É —Ç—ã—Å—è—á–∞–º–∏
                try:
                    price_int = int(price.replace(',', '').replace('.', ''))
                    formatted_price = f"{price_int:,}".replace(',', ' ')
                    # –ó–∞–º–µ–Ω—è–µ–º —Ü–µ–Ω—É –≤ —Å—Ç—Ä–æ–∫–µ
                    line = re.sub(r'(\d+[\s\.,]?\d*)\s*(?:—Ä—É–±|—Ä|‚ÇΩ|RUB)', f"{formatted_price}‚ÇΩ", line, flags=re.IGNORECASE)
                except ValueError:
                    pass
            
            # –í—ã–¥–µ–ª—è–µ–º "–¶–µ–Ω–∞:" –∂–∏—Ä–Ω—ã–º
            line = re.sub(r'(–¶–µ–Ω–∞:)', r'*\1*', line, flags=re.IGNORECASE)
            formatted_lines.append(line)
            continue
        
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º –±–ª–æ–∫–µ, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ—ë –∫—É—Ä—Å–∏–≤–æ–º
        if in_special_block:
            # –ù–µ –ø—Ä–∏–º–µ–Ω—è–µ–º –∫—É—Ä—Å–∏–≤, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            if '*' not in line:
                line = f"_{line}_"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∂–∏—Ä–Ω—ã–º
        key_params = [
            '–ö–æ–º–ø–ª–µ–∫—Ç:', '–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä:', 'IMEI', 'S/N', '–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä:', 
            '–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –ø–æ –∞–¥—Ä–µ—Å—É:', '–†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö:'
        ]
        
        for param in key_params:
            if param.lower() in line.lower():
                # –í—ã–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∂–∏—Ä–Ω—ã–º
                pattern = re.escape(param)
                line = re.sub(f'({pattern})', r'*\1*', line, flags=re.IGNORECASE)
                break
        
        formatted_lines.append(line)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–≤–æ–π–Ω—ã–º –ø–µ—Ä–µ–Ω–æ—Å–æ–º –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    formatted_text = '\n'.join(formatted_lines)
    
    # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ –¥–≤–æ–π–Ω—ã–µ
    formatted_text = re.sub(r'\n{3,}', '\n\n', formatted_text)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    formatted_text = re.sub(r'([\U00010000-\U0010ffff])', r'\1 ', formatted_text)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–æ–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    formatted_text = re.sub(r' {2,}', ' ', formatted_text)
    
    return formatted_text

def format_for_telegram(text: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è Telegram —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Markdown V2.
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        
    Returns:
        str: –¢–µ–∫—Å—Ç, –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è Telegram
    """
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–µ–Ω—è–µ–º –æ–±—â–µ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    formatted_text = format_post_text(text)
    
    # –£–º–µ–Ω—å—à–∞–µ–º –¥–ª–∏–Ω—É —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –¥–ª—è Telegram
    formatted_text = re.sub(r'‚Äî{30}', '‚Äî' * 19, formatted_text)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è Telegram
    formatted_text += get_telegram_signature()
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown V2
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in special_chars:
        formatted_text = formatted_text.replace(char, f'\\{char}')
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ –∏ –∫—É—Ä—Å–∏–≤–∞
    formatted_text = formatted_text.replace('\\*', '*').replace('\\_', '_')
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Å—ã–ª–æ–∫
    formatted_text = re.sub(r'\\\[(.*?)\\\]\\\((.*?)\\\)', r'[\1](\2)', formatted_text)
    
    return formatted_text

def format_for_instagram(text: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è Instagram (–±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è).
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        
    Returns:
        str: –¢–µ–∫—Å—Ç, –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è Instagram
    """
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—â–µ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    formatted_text = format_post_text(text)
    
    # –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ Instagram –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Markdown
    formatted_text = formatted_text.replace('*', '').replace('_', '')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è Instagram
    formatted_text += get_instagram_signature()
    
    return formatted_text

def format_for_vk(text: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        
    Returns:
        str: –¢–µ–∫—Å—Ç, –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
    """
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—â–µ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    formatted_text = format_post_text(text)
    
    # –ó–∞–º–µ–Ω—è–µ–º –º–∞—Ä–∫–µ—Ä—ã Markdown –Ω–∞ HTML-—Ç–µ–≥–∏ –¥–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
    formatted_text = formatted_text.replace('*', '')  # –í–ö –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –≤ API
    formatted_text = formatted_text.replace('_', '')  # –í–ö –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫—É—Ä—Å–∏–≤ –≤ API
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
    formatted_text += get_vk_signature()
    
    return formatted_text
